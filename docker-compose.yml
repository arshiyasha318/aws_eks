version: '3.8'

services:
  # Database service
  db:
    image: postgres:13-alpine
    container_name: doctor_booking_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: doctor_booking
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Backend service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: doctor_booking_api
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=doctor_booking
      - DB_PORT=5432
      - JWT_SECRET=your_jwt_secret_key_here
      - ENV=development
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./backend/docs:/app/docs
    restart: unless-stopped
    networks:
      - app-network

  # Frontend Production
  frontend-prod:
    build:
      context: ./frontend
      target: production
    container_name: doctor_booking_frontend_prod
    ports:
      - "8081:80"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=/api/v1
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - app-network

  # Frontend Development
  frontend-dev:
    build:
      context: ./frontend
      target: development
    container_name: doctor_booking_frontend_dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/dist
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8080/api/v1
    command: sh -c "npm install && npm run dev"
    depends_on:
      - api
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
